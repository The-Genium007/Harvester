#!/usr/bin/env python3
"""
Script de d√©veloppement pour SentinelIQ Harvester
Facilite le d√©veloppement et les tests
"""
import os
import sys
import asyncio
import subprocess
from pathlib import Path
from typing import List, Optional

# Ajoute le r√©pertoire racine au PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

from src.config import settings
from src.database import db_manager


class DevManager:
    """Gestionnaire pour le d√©veloppement"""
    
    def __init__(self):
        self.root_dir = Path(__file__).parent
        
    async def init_database(self):
        """Initialise la base de donn√©es"""
        print("üóÑÔ∏è Initialisation de la base de donn√©es...")
        
        try:
            # Teste la connexion
            await db_manager.initialize()
            print("‚úÖ Connexion √† la base de donn√©es √©tablie")
            
            # Cr√©e les tables si n√©cessaire
            from src.models import Base
            
            async with db_manager.get_session() as session:
                # Active l'extension pgvector si disponible
                try:
                    await session.execute("CREATE EXTENSION IF NOT EXISTS vector")
                    print("‚úÖ Extension pgvector activ√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è Pgvector non disponible: {e}")
                    
                await session.commit()
                
            print("‚úÖ Base de donn√©es initialis√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur d'initialisation de la base: {e}")
            return False
            
        finally:
            await db_manager.close()
            
        return True
        
    async def test_discovery(self, categories: Optional[List[str]] = None):
        """Teste le moteur de d√©couverte"""
        print("üîç Test du moteur de d√©couverte...")
        
        try:
            from src.tasks.discovery_tasks import run_discovery_without_celery
            
            if not categories:
                categories = ["machine learning", "fastapi"]
                
            result = await run_discovery_without_celery(categories, max_sources=5)
            
            print("üìä R√©sultats de d√©couverte:")
            print(f"  - Sources d√©couvertes: {result.get('sources_discovered', 0)}")
            print(f"  - Sources ajout√©es: {result.get('sources_added', 0)}")
            
            if result.get('errors'):
                print("‚ö†Ô∏è Erreurs:")
                for error in result['errors']:
                    print(f"  - {error}")
                    
        except Exception as e:
            print(f"‚ùå Erreur test d√©couverte: {e}")
            
    async def test_crawler(self, url: str = "https://fastapi.tiangolo.com"):
        """Teste le crawler"""
        print(f"üï∑Ô∏è Test du crawler sur: {url}")
        
        try:
            from src.crawler.core.smart_crawler import SmartCrawler
            
            crawler = SmartCrawler()
            await crawler.initialize()
            
            result = await crawler.crawl_url(url)
            
            if result:
                print("‚úÖ Crawling r√©ussi:")
                print(f"  - Titre: {result.get('title', 'N/A')[:100]}")
                print(f"  - Contenu: {len(result.get('content', ''))} caract√®res")
                print(f"  - Qualit√©: {result.get('quality_score', 0):.2f}")
            else:
                print("‚ùå √âchec du crawling")
                
            await crawler.close()
            
        except Exception as e:
            print(f"‚ùå Erreur test crawler: {e}")
            
    async def test_search(self, query: str = "machine learning"):
        """Teste la recherche s√©mantique"""
        print(f"üîé Test de recherche: '{query}'")
        
        try:
            from src.api.search import SemanticSearchEngine
            
            search_engine = SemanticSearchEngine()
            await search_engine.initialize()
            
            results = await search_engine.search(query, limit=3)
            
            print(f"üìä {len(results)} r√©sultats trouv√©s:")
            for i, result in enumerate(results, 1):
                print(f"  {i}. {result.get('title', 'N/A')[:80]}")
                print(f"     Score: {result.get('similarity_score', 0):.2f}")
                
            await search_engine.close()
            
        except Exception as e:
            print(f"‚ùå Erreur test recherche: {e}")
            
    def start_dev_server(self):
        """D√©marre le serveur de d√©veloppement"""
        print("üöÄ D√©marrage du serveur de d√©veloppement...")
        
        os.environ["ENVIRONMENT"] = "development"
        
        cmd = [
            "uvicorn",
            "src.api.main:app",
            "--host", "localhost",
            "--port", "8000",
            "--reload",
            "--log-level", "debug"
        ]
        
        subprocess.run(cmd)
        
    async def generate_test_data(self):
        """G√©n√®re des donn√©es de test"""
        print("üìù G√©n√©ration de donn√©es de test...")
        
        try:
            await db_manager.initialize()
            
            from src.models import Source, Article
            
            async with db_manager.get_session() as session:
                # Cr√©e quelques sources de test
                test_sources = [
                    {
                        "name": "FastAPI Documentation",
                        "base_url": "https://fastapi.tiangolo.com",
                        "category": "web-framework",
                        "description": "Documentation officielle de FastAPI"
                    },
                    {
                        "name": "Python.org",
                        "base_url": "https://www.python.org",
                        "category": "programming-language", 
                        "description": "Site officiel de Python"
                    }
                ]
                
                sources_added = 0
                for source_data in test_sources:
                    # V√©rifie si existe d√©j√†
                    existing = await session.execute(
                        "SELECT id FROM sources WHERE base_url = %s",
                        (source_data["base_url"],)
                    )
                    
                    if not existing.fetchone():
                        source = Source(**source_data)
                        session.add(source)
                        sources_added += 1
                        
                await session.commit()
                print(f"‚úÖ {sources_added} sources de test ajout√©es")
                
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration donn√©es: {e}")
        finally:
            await db_manager.close()
            
    def show_status(self):
        """Affiche le statut du syst√®me"""
        print("üìä Statut du syst√®me SentinelIQ")
        print("=" * 40)
        
        # Configuration
        print(f"üîß Environnement: {settings.environment}")
        print(f"üóÑÔ∏è Base de donn√©es: {settings.supabase_url or 'Non configur√©e'}")
        print(f"üìä Redis: {settings.redis_url}")
        print(f"ü§ñ OpenAI: {'‚úÖ' if settings.openai_api_key else '‚ùå'}")
        
        # V√©rification des d√©pendances
        print("\nüì¶ D√©pendances:")
        
        deps_to_check = [
            ("FastAPI", "fastapi"),
            ("SQLAlchemy", "sqlalchemy"), 
            ("Celery", "celery"),
            ("Redis", "redis"),
            ("OpenAI", "openai"),
            ("BeautifulSoup", "bs4"),
            ("aiohttp", "aiohttp")
        ]
        
        for name, import_name in deps_to_check:
            try:
                __import__(import_name)
                print(f"  ‚úÖ {name}")
            except ImportError:
                print(f"  ‚ùå {name} (manquant)")
                
    def run_tests(self):
        """Lance les tests"""
        print("üß™ Lancement des tests...")
        
        test_files = list(self.root_dir.glob("tests/**/*.py"))
        
        if not test_files:
            print("‚ö†Ô∏è Aucun fichier de test trouv√©")
            return
            
        cmd = ["python", "-m", "pytest", "-v"] + [str(f) for f in test_files]
        subprocess.run(cmd)


def main():
    """Point d'entr√©e principal"""
    if len(sys.argv) < 2:
        print("üõ†Ô∏è SentinelIQ Harvester - Outils de d√©veloppement")
        print()
        print("Commandes disponibles:")
        print("  init-db           Initialise la base de donn√©es")
        print("  test-discovery    Teste le moteur de d√©couverte")
        print("  test-crawler      Teste le crawler")
        print("  test-search       Teste la recherche s√©mantique")
        print("  generate-data     G√©n√®re des donn√©es de test")
        print("  dev-server        D√©marre le serveur de d√©veloppement")
        print("  status            Affiche le statut du syst√®me")
        print("  tests             Lance les tests")
        print()
        print("Exemples:")
        print("  python dev.py init-db")
        print("  python dev.py test-discovery")
        print("  python dev.py test-crawler https://example.com")
        print("  python dev.py test-search 'machine learning'")
        return
        
    command = sys.argv[1]
    dev_manager = DevManager()
    
    if command == "init-db":
        asyncio.run(dev_manager.init_database())
        
    elif command == "test-discovery":
        categories = sys.argv[2:] if len(sys.argv) > 2 else None
        asyncio.run(dev_manager.test_discovery(categories))
        
    elif command == "test-crawler":
        url = sys.argv[2] if len(sys.argv) > 2 else "https://fastapi.tiangolo.com"
        asyncio.run(dev_manager.test_crawler(url))
        
    elif command == "test-search":
        query = sys.argv[2] if len(sys.argv) > 2 else "machine learning"
        asyncio.run(dev_manager.test_search(query))
        
    elif command == "generate-data":
        asyncio.run(dev_manager.generate_test_data())
        
    elif command == "dev-server":
        dev_manager.start_dev_server()
        
    elif command == "status":
        dev_manager.show_status()
        
    elif command == "tests":
        dev_manager.run_tests()
        
    else:
        print(f"‚ùå Commande inconnue: {command}")
        print("Utilisez 'python dev.py' pour voir les commandes disponibles")


if __name__ == "__main__":
    main()

# Configuration exemple pour SentinelIQ Harvester
# Copiez ce fichier vers .env et configurez vos valeurs

# Base de données Supabase - Choisissez votre type de connexion
# Option 1: Direct Connection (recommandée pour apps persistantes)
DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.[PROJECT-ID].supabase.co:5432/postgres

# Option 2: Transaction Pooler (pour serverless/IPv4)
# DATABASE_URL=postgresql://postgres.[PROJECT-ID]:[YOUR-PASSWORD]@aws-0-eu-west-3.pooler.supabase.com:6543/postgres

# Variables séparées (optionnel, pour compatibilité)
DB_HOST=db.[PROJECT-ID].supabase.co
DB_PORT=5432
DB_NAME=postgres
DB_USER=postgres
DB_PASSWORD=[YOUR-PASSWORD]

# Supabase API
SUPABASE_URL=https://[PROJECT-ID].supabase.co
SUPABASE_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Redis local (pour développement) ou Supabase Redis si disponible
REDIS_URL=redis://localhost:6379/0

# Configuration API
API_HOST=localhost
API_PORT=8000
ENVIRONMENT=development

# OpenAI (optionnel pour les fonctionnalités ML et embeddings)
OPENAI_API_KEY=sk-your-openai-key

# Configuration Celery
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Sécurité
SECRET_KEY=your-super-secret-key-for-development

# Logs
LOG_LEVEL=DEBUG

# Workers
WORKER_QUEUES=default,crawler,discovery,indexing
CELERY_WORKER_CONCURRENCY=2

# Migrations
RUN_MIGRATIONS=true

# Configuration de développement
DEBUG=true
TESTING=false

# ========================================
# Instructions de configuration Supabase:
# ========================================
# 1. Créez un projet sur https://supabase.com
# 2. Settings > Database > Connection String pour DATABASE_URL
# 3. Settings > API pour SUPABASE_URL et les clés
# 4. Settings > Database > Extensions > Activez pgvector
# 5. Remplacez [PROJECT-ID] et [YOUR-PASSWORD] par vos vraies valeurs
# 6. Lancez: python3 scripts/setup_database.py
